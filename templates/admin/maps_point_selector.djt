{% extends 'admin/change_form.html' %}

{% block extrahead %}
{{ block.super }}
<script type="text/javascript" src="http://www.ucf.edu/js/jquery.js"></script>
<script src="http://maps.google.com/maps/api/js?sensor=false&libraries=drawing " type="text/javascript" ></script>
{% endblock %}


{% block after_field_sets %}

<div style="border:1px solid #CCCCCC; padding:8px 12px;">
	<div style="position:realtive">
		<h3 style="float:left;width:51%;">Google Map</h3>
		<h3 style="float:left;">Illustrated Map</h3>
		<div id="map-canvas" style="width:49%;clear:left; float:left; height:360px;"></div>
		<div id="ill-canvas" style="width:49%; clear:right; float:right; height:360px;"></div>
		<h3 style="float:left;margin-top:20px;">Poly Coordinates Map</h3>
		<div id="poly-canvas" style="width:49%;clear:left;float:left; height:360px;"></div>
		<div style="clear:both;"></div>
	</div>
</div>

<script type="text/javascript">

/* Google Map */
$(document).ready(function(){
	/**************************************************************************\
		Location being updated
	\**************************************************************************/
	var location = {
	{% if original and original.googlemap_point %}
		set  : true,
		x    : {{original.googlemap_point}}[0],
		y    : {{original.googlemap_point}}[1],
		name : "{{original.name}}"
	{% else %}
		set  : false,
		x    : 28.601669501975557,
		y    : -81.200527721813230,
		name : null
	{% endif %}
	};
	
	/**************************************************************************\
		Create a google map
		  - if set, center at Location
		  - else center at Student Union Entrance
	\**************************************************************************/	
	var myLatlng = new google.maps.LatLng(location.x,location.y);
	
	var myOptions = {
	  zoom: 16,
	  center: myLatlng,
	  draggableCursor : 'crosshair',
	  mapTypeId: google.maps.MapTypeId.ROADMAP
	}
	
	map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);
	
	/**************************************************************************\
		Create dummy marker
	\**************************************************************************/
	var marker = new google.maps.Marker({
		position: {% if original %}myLatlng{% else %}null{% endif %},
		title:"Google Map Point"
	});
	
	/**************************************************************************\
		If location has coordinaties, update and place marker
	\**************************************************************************/
	if(location.set){
		marker.position = new google.maps.LatLng(location.x,location.y);
		marker.title = location.name;
		marker.setMap(map);
	}
	
	/**************************************************************************\
		When map is clicked:
		  - form's coord_x and coord_y are updated with new location
		  - marker is moved to new location
	\**************************************************************************/
	var place_marker = function(latlng){
		var array_str = '[' + latlng.lat() + ', ' + latlng.lng() + ']';
		$('#id_googlemap_point').val(array_str);
		marker.position = latlng;
		marker.setMap(map);
		return;
	}
	
	google.maps.event.addListener(map, 'click', function(event) {
		place_marker(event.latLng);
		return;
	});
});   

/* Illustrated Map */	 
$(document).ready(function(){
	/**************************************************************************\
		See static/js/map.js for better documentation
	\**************************************************************************/
	var location = {
	{% if original and  original.illustrated_point %}
		set  : true,
		x    : {{original.illustrated_point}}[0],
		y    : {{original.illustrated_point}}[1],
		name : "{{original.name|default:'Add Building'}}"
	{% else %}
		set  : false,
		x    : 85.045714130897840,
		y    : -179.917893864798690,
		name : null
	{% endif %}
	};
	
	var CoordMapType= function(){};
	
	CoordMapType.prototype.tileSize = new google.maps.Size(256,256);
	CoordMapType.prototype.minZoom = 12;
	CoordMapType.prototype.maxZoom = 17;
	CoordMapType.prototype.alt = "UCF Illustrated Campus Map";	  

	CoordMapType.prototype.getTile = function(coord, zoom, ownerDocument) {
	  var div = ownerDocument.createElement('DIV');
	  div.style.width = this.tileSize.width + 'px';
	  div.style.height = this.tileSize.height + 'px';
	  div.style.backgroundImage = 'url("http://cdn.ucf.edu/map/tiles/' + getTileUrl(coord, zoom) + '")';
	  return div;
	};
	
	var getTileUrl = function(coord,zoom) {
		var tile = "zoom-" + zoom + "/" + zoom + "-" + coord.x + "-" + coord.y + ".jpg";
		var nope = "white.png"; //white tile
		if(zoom < 12 || coord.y<0 || coord.x<0){
			return nope;
		} else if( zoom === 12){
			if(coord.y >1 || coord.x > 2) return nope;
		} else {
			var wide = 5;
			var tall = 3;
			var factor = Math.pow(2, (zoom - 13));
			if( coord.x >= wide*factor || coord.y >= tall*factor) return nope;
		}
		return tile;
	};
	
	var myLatlng = new google.maps.LatLng(85.04591,-179.92189);
	if(location.x !== "None" && location.y !== "None"){
		myLatlng = new google.maps.LatLng(location.x,location.y);
	}
	
	var myOptions = {
	  zoom: 14,
	  center: myLatlng,
	  draggableCursor : 'crosshair',
	  mapTypeControl: false
	}
	
	var map;
	var coordinateMapType = new CoordMapType();
	map = new google.maps.Map(document.getElementById("ill-canvas"), myOptions);

	// Now attach the coordinate map type to the map's registry
	map.mapTypes.set('coordinate',coordinateMapType);

	// We can now set the map to use the 'coordinate' map type
	map.setMapTypeId('coordinate');
	
	
	var marker = new google.maps.Marker({
		position: myLatlng,
		title:"Illustrated Map Point"
	});
	if(location.set){
		marker.title = location.name;
		marker.setMap(map);
	}
	
	var place_marker = function(latlng){
		var array_str = '[' + latlng.lat() + ', ' + latlng.lng() + ']';
		$('#id_illustrated_point').val(array_str);
		marker.position = latlng;
		marker.setMap(map);
		return;
	}
	
	google.maps.event.addListener(map, 'click', function(event) {
		place_marker(event.latLng);
		return;
	 });	
}); 

/* Poly Coordinates Map */
$(document).ready(function(){
	/**************************************************************************\
		Create a google map
		  - center at Student Union Entrance
	\**************************************************************************/
	var map = new google.maps.Map(
		document.getElementById("poly-canvas"),
		{
		  zoom            : 16,
		  center          : new google.maps.LatLng(28.601669501975557,-81.200527721813230),
		  draggableCursor : 'crosshair',
		  mapTypeId       : google.maps.MapTypeId.ROADMAP
		}
	);
	
	/**************************************************************************\
		Create the drawing manager
	\**************************************************************************/
	common_polygon_options = {
		fillColor    : 'pink',
		strokeColor  : 'grey',
		fillOpacity  : 1,
		strokeWeight : 3,
		clickable    : false,
		zIndex       : 1,
		editable     : true,
		map          : map
	}

	var drawingManager = new google.maps.drawing.DrawingManager({
		drawingMode: null,
		drawingControl: true,
		drawingControlOptions: {
			position: google.maps.ControlPosition.TOP_CENTER,
			drawingModes: [
			]
		},
		polygonOptions: common_polygon_options,
	});
	drawingManager.setMap(map);

	/**************************************************************************\
		If there are poly coords, create corresponding polygons and display
		them on the map.
	\**************************************************************************/

	var poly_coords = eval('{{original.js_poly_coords}}');

	if(poly_coords != undefined) {
		// If it's just only polygon, enclose it in an array
		// to avoid code duplication later
		if(typeof poly_coords[0][1] == 'number') {
			poly_coords = [poly_coords]
		}

		// Pan to the midpoint of the first polygon
		var midpoint_func = function(a, b) { return [((a[0] + b[0]) / 2), ((a[1] + b[1])/ 2)]}
		var midpoint = poly_coords[0].reduce(midpoint_func)
		map.panTo(new google.maps.LatLng(midpoint[1], midpoint[0]));

		// Convert array of lats and lngs into array of google.maps.LatLng
		function convert_coords(points) {
			var gpoints = [];
			$.each(points, function(index, point) {
				if(point[0] != undefined && point[1] != undefined 
					&& typeof point[0] == 'number' && typeof point[1] == 'number') {
					gpoints.push(new google.maps.LatLng(point[1], point[0]));
				} else {
					gpoints.push(convert_coords(point));
				}
			});
			return gpoints;
		}
		var g_poly_coords = convert_coords(poly_coords);
		
		var custom_options = common_polygon_options;
		custom_options.paths = g_poly_coords;
		var polygon = new google.maps.Polygon(custom_options)
	}
}); 
</script>

{% endblock %}